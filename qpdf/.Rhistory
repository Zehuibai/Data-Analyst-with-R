clin.par <- c("Age", "BL_T4", "BL_NodalStatus", "BL_Grading_12vs3", "BL_HR", "BL_ER", "BL_PR", "BL_HER2", "ypT0_ypN0")
## survival parameters
surv.par <- c("DFS", "eventDFS", "OS", "eventOS")
## covariable for regressions
clin.covar <- c("Age_group", "BL_T4", "BL_NodalStatus", "BL_Grading_12vs3")
## add data
m <- match(data.ctc$PatID, metadb$PatID)
data <- cbind(data.ctc, metadb[m, c(clin.par, surv.par)])
rm(data.ctc, new_fu_data, metadb, m)
## recode tumor size
data$BL_T4 <- factor(ifelse(data$BL_T4 == 1, "1-3",
ifelse(data$BL_T4 == 2, "4a-d", NA)),
levels=c("1-3", "4a-d"))
## recorde nodal status
data$BL_NodalStatus <- factor(ifelse(data$BL_NodalStatus == 0, "node negative",
ifelse(data$BL_NodalStatus == 1, "node positive", NA)),
levels=c("node negative", "node positive"))
## recode grading
data$BL_Grading_12vs3 <- factor(ifelse(data$BL_Grading_12vs3 == 1, "Grade 1_2",
ifelse(data$BL_Grading_12vs3 == 2, "Grade 3", NA)),
levels=c("Grade 1_2", "Grade 3"))
## recode receptor status
for (i in c("BL_ER", "BL_PR", "BL_HR", "BL_HER2")) {
data[[i]] <- factor(ifelse(data[[i]]==1, "positive",
ifelse(data[[i]]==0, "negative", NA)),
levels=c("negative", "positive"))
}
## recode pCR
data$pCR <- factor(data$ypT0_ypN0, level = c(0, 1), label = c("no pCR", "pCR"))
stopifnot(identical(is.na(data$ypT0_ypN0), is.na(data$pCR)))
## add additional variables
data$Age_group <- factor(ifelse(data$Age<50, "<50", ">=50"), levels=c("<50", ">=50"))
data$Recurrence <- factor(ifelse(data$eventDFS == 1 & (data$DFS < data$OS | data$eventOS == 0), "reported", "not reported")) # recurrences are DFS events not identical to death events
data$Death <- factor(ifelse(data$eventOS, "reported", "not reported"))
data$pCR_CTC_1 <- as.factor(paste(data$pCR, ifelse(data$CTC >= 1, "CTC>=1", "CTC=0"), sep = ", "))
data$pCR_CTC_2 <- as.factor(paste(data$pCR, ifelse(data$CTC >= 2, "CTC>=2", "CTC<2"), sep = ", "))
## get a data frame with the differences in CTC and changes in CTC_1 and CTC_2 between the time points
## get all PatIDs that have two measurements
pairs <- intersect(data[data$time=="before therapy","PatID"], data[data$time=="after therapy","PatID"])
data.before <- data[data$time=="before therapy" & data$PatID %in% pairs,]
data.after <- data[data$time=="after therapy" & data$PatID %in% pairs,]
stopifnot(identical(data.before$PatID, data.after$PatID))
## create diff data frame
data.diff <- data.after
data.diff$time <- "change in time"
data.diff$CTC <- data.diff$CTC - data.before$CTC
data.diff$CTC_1 <- factor(paste(data.before$CTC_1, data.after$CTC_1, sep=" -> "),
c("0 -> 0", "0 -> >=1", ">=1 -> 0", ">=1 -> >=1"))
data.diff$CTC_2 <- factor(paste(data.before$CTC_2, data.after$CTC_2, sep=" -> "),
c("<2 -> <2", "<2 -> >=2", ">=2 -> <2", ">=2 -> >=2"))
data.diff$pCR_CTC_1 <- NULL
data.diff$pCR_CTC_2 <- NULL
rm(pairs, data.before, data.after)
## write data to files for validation
#write.csv2(data, "data.csv")
#write.csv2(data.diff, "data_diff.csv")
################################################################################
## define subgroups
subgroups <- list(
All = list(name1 = "All",
name2 = "",
name3 = "All",
fct = function(data) {
return(rep(TRUE, nrow(data)))
}),
Luminal = list(name1 = "Luminal",
name2 = "Luminal:",
name3 = "ER and/or PR positive, HER2 negative",
fct = function(data) {
return(data$BL_HR=="positive" & data$BL_HER2=="negative")
}),
HER2 = list(name1 = "HER2 positive",
name2 = "HER2 positive:",
name3 = "HER2 positive",
fct = function(data) {
return(data$BL_HER2=="positive")
}),
TriNeg = list(name1 = "Triple negative",
name2 = "Triple negative:",
name3 = "ER, PR, and HER2 negative",
fct = function(data) {
return(data$BL_HR=="negative" & data$BL_HER2=="negative")
})
)
## define subsets
subsets <- list(
Before = list(name = "before therapy",
fct = function(data) { return(data$time=="before therapy") },
data = data),
After = list(name = "after therapy",
fct = function(data) { return(data$time=="after therapy") },
data = data),
AnyTime = list(name = "any time",
fct = function(data) { return(rep(TRUE, nrow(data))) },
data = data),
Change = list(name = "change in time",
fct = function(data) { return(rep(TRUE, nrow(data))) },
data = data.diff)
)
## configurations
config.km <- list(vars = rep(c("CTC_1", "CTC_2"), 3),
subsets = rep(subsets[c("Before", "After", "AnyTime")], each=2),
showP = rep(c(T, T, F), each=2))
config.cox <- list(vars = rep(c("CTC_1", "CTC_2", "CTC"), 3),
subsets = rep(subsets[c("Before", "After", "AnyTime")], each=3),
showP = rep(c(T, T, F), each=3))
config.diff.km <- list(vars = c("CTC_1", "CTC_2"),
subsets = rep(subsets["Change"], each=2),
showP = rep(T, each=2))
config.diff.cox <- list(vars = c("CTC_1", "CTC_2", "CTC"),
subsets = rep(subsets["Change"], each=3),
showP = rep(T, each=3))
config.km.pcr <- list(vars = rep(c("pCR_CTC_1", "pCR_CTC_2"), 2),
subsets = rep(subsets[c("Before", "After")], each=2),
showP = rep(c(F, F), each=2))
stopifnot(var(sapply(config.km, length)) == 0)
stopifnot(var(sapply(config.cox, length)) == 0)
stopifnot(var(sapply(config.diff.km, length)) == 0)
stopifnot(var(sapply(config.diff.cox, length)) == 0)
stopifnot(var(sapply(config.km.pcr, length)) == 0)
## get properties of endpoint
endpoint.DFS <- list(Surv = "Surv(DFS, eventDFS)",
event = "eventDFS",
main = "(DFS)")
endpoint.OS <- list(Surv = "Surv(OS, eventOS)",
event = "eventOS",
main = "(OS)")
## generic function to generate KM plots
genericKM6 <- function(file.no, file.base, config, data, expr, subgroup, endpoint, i, height) {
# configuration
subset <- config$subsets[[i]]$fct(data) & subgroup$fct(data)
if (endpoint$Surv == "Surv(DFS, eventDFS)") {
endpoint.time <- data$DFS[subset]
endpoint.event <- data$eventDFS[subset] + 0
ylab <- "disease free survival rate"
}
if (endpoint$Surv == "Surv(OS, eventOS)") {
endpoint.time <- data$OS[subset]
endpoint.event <- data$eventOS[subset] + 0
ylab <- "survival rate"
}
group <- data[[ config$vars[i] ]][subset]
# create plot
g <- kaplan.meier.plot(
endpoint.time, endpoint.event, group,
xlab = "time (months)", ylab = ylab)
# write plot to file
filename <- sprintf("%s/%03.0f_%s_%1.0f.png", get.output.dir(), file.no, file.base, i)
png(filename = filename, width = 4.5, height = height, unit = "in", res = 720)
grid.draw(g)
dev.off()
}
## create result table from cox regression object
formatCoxResults <- function(cox, showP) {
# get numbers
coefs <- summary(cox)$coefficients
hr <- exp(coef(cox))
ci <- exp(confint(cox, level=0.95))
se <- coefs[ ,"se(coef)"]
pVal <- coefs[ ,"Pr(>|z|)", drop=F]
## assemble table
retNum <- cbind(hr, ci, pVal)
ret <- matrix(sprintf("%5.3f", retNum), ncol = 4)
ret[is.na(retNum)] <- ""
## detect undetermined coefficients
noDataRows <- !is.finite(se) | se > 100 | se == 0
ret[noDataRows, 1] = "no data"
ret[noDataRows, 2:4] = ""
## remove CI and P-value if data set contains duplicates (i.e. "any time")
if (!showP) ret[, 2:4] = ""
## set col and rownames
colnames(ret) <- c("HR", "95% lower", "95% upper", "P")
rownames(ret) <- rownames(coefs)
return(ret)
}
## generic function for Cox regressions
genericCox <- function(config, data, endpoint) {
# create result table
tab <- NULL
for (sg in subgroups) {
for (i in 1:length(config$vars)) {
## determine subset
dataSubset <- subset(data, config$subsets[[i]]$fct(data) & sg$fct(data))
## univariate cox regression
cox <- coxph(as.formula(paste(endpoint$Surv,
config$vars[i],
sep="~")),
data=dataSubset)
tab.uni <- formatCoxResults(cox, config$showP[i])
## multivariate cox regression
cox <- coxph(as.formula(paste(endpoint$Surv,
paste(c(config$vars[i], clin.covar), collapse="+"),
sep="~")),
data=dataSubset)
tab.multi <- formatCoxResults(cox, config$showP[i])[cox$assign[[1]], , drop=F]
## bind results nicely together
stopifnot(identical(rownames(tab.uni), rownames(tab.multi)))
tab.both <- cbind(tab.uni, tab.multi)
rownames(tab.both) <- paste(config$subsets[[i]]$name, sani.r(rownames(tab.both)), sep="; ")
tab <- rbind(tab, tab.both)
}
}
colnames(tab) <- sani(colnames(tab))
rownames(tab) <- sani(rownames(tab))
return(tab)
}
rayDiagram <- function(file.no, file.base, data, height) {
# get data (data.diff only contains the difference in numbers, not the absolute numbers at both time points)
PatID = intersect(data$PatID[data$time == "before therapy"],
data$PatID[data$time == "after therapy"])
stopifnot(length(PatID) == 133)
d <- merge(data.frame(PatID = PatID),
with(subset(data, time == "before therapy"),
data.frame(PatID = PatID, CTC.before = CTC)),
all.x = T, all.y = F)
d <- merge(d,
with(subset(data, time == "after therapy"),
data.frame(PatID = PatID, CTC.after = CTC)),
all.x = T, all.y = F)
stopifnot(nrow(d) == 133)
stopifnot(!is.na(d$CTC.before))
stopifnot(!is.na(d$CTC.after))
# group patients into CTC number classes
d$num <- 1
d <- aggregate(num ~ CTC.before + CTC.after, d, sum) # also removes PatID
# create plot
vRays <- viewport(
x = unit(4.0, "lines"), width = unit(1, "npc") - unit(4.1, "lines"),
y = unit(3.5, "lines"), height = unit(1, "npc") - unit(3.6, "lines"),
just = c(0, 0),
xscale = c(-0.3, 1.3), yscale = c(log(0.3), log(15)))
grobs <- gList(
rectGrob(vp = vRays),
xaxisGrob(vp = vRays, at = c(0, 1), label = c("before therapy", "after therapy")),
yaxisGrob(vp = vRays, at = log(c(0.5, 1, 2, 3, 5, 10)), label = c("0", "1", "2", "3", "5", "10")),
textGrob("sampling time point", x = unit(0.5, "native"), y = unit(-2.4, "lines"),
just = "top", vp = vRays),
textGrob("number of CTCs per 7.5ml", x = unit(-3.9, "lines"),
y = unit((log(0.3) + log(15)) / 2, "native"), rot = 90,
just = "top", vp = vRays))
for(i in 1:nrow(d))
grobs <- gList(grobs, linesGrob(
x = unit(c(0, 1), "native"),
y = unit(log(pmax(0.5, c(d$CTC.before[i], d$CTC.after[i]))), "native"),
gp = gpar(lwd = d$num[i] / 3),
vp = vRays))
g <- gTree(children = grobs)
# write plot to file
filename <- sprintf("%s/%03.0f_%s.png", get.output.dir(), file.no, file.base)
png(filename = filename, width = 4.5, height = height, unit = "in", res = 720)
grid.draw(g)
dev.off()
}
# adjust names
data$CTC_1 <- factor(ifelse(data$CTC_1 == "0", "CTC=0", ifelse(data$CTC_1 == ">=1", "CTC>=1", NA)), levels = c("CTC=0", "CTC>=1"))
stopifnot(!is.na(data$CTC_1))
data$CTC_2 <- factor(sprintf("CTC%s", data$CTC_2), levels = c("CTC<2", "CTC>=2"))
stopifnot(!is.na(data$CTC_2))
### generate figures:
# before therapy
genericKM6(101, "kmbDFS",      config.km, data, "dummy", subgroups$All,     endpoint.DFS, 1, 4)
library(devtools)
install_github('rapport', 'rapporter')
devtools::install_github("rvlenth/lsmeans", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# <!-- ---------------------------------------------------------------------- -->
# <!--                    1. load the required packages                       -->
# <!-- ---------------------------------------------------------------------- -->
## if(!require(psych)){install.packages("psych")}
packages<-c("tidyverse", "knitr", "papeR", "qpdf")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                        2. Basic system settings                        -->
# <!-- ---------------------------------------------------------------------- -->
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
Sys.setlocale("LC_ALL","English")
## convert backslash to forward slash in R
# gsub('"', "", gsub("////", "/", readClipboard()))
### get the path
# rstudioapi::getSourceEditorContext()$path
# dirname(rstudioapi::getSourceEditorContext()$path)
### set working directory
# getwd()
# setwd("c:/Users/zbai/Desktop")
# Sys.setlocale("LC_ALL","English")
### get the R Version
# paste(R.Version()[c("major", "minor")], collapse = ".")
### convert backslash to forward slash
# scan("clipboard",what="string")
# gsub('"', "", gsub("////", "/", readClipboard()))
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--     3. Load the SASmarkdown package if the SAS output is required      -->
# <!-- ---------------------------------------------------------------------- -->
# library(SASmarkdown)
# ### Set SAS output
# ### Reset engine to R
# saspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
# sasopts <- "-nosplash -linesize 75"
# knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
#         engine.opts=sasopts, comment=NA)
#
# # run these commands to convince yourself that
# # within this knitr session the engine changed.
# knitr::opts_chunk$get()$engine
# knitr::opts_chunk$get()$engine.path
# knitr::opts_chunk$get()$engine.opts
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                         4. Import the datasets                         -->
# <!-- ---------------------------------------------------------------------- -->
### Import csv data
# pfad <- "~/Desktop/SASUniversityEdition/myfolders/Daten"
# mydata1 <- read.csv(file.path(pfad, "yourcsv_data.csv"),
#                     sep=";",
#                     header=TRUE)
### Import xlsx data
# library(readxl)
# mydata2 <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
### Import sas data
# library(sas7bdat)
# mydata3 <- read.sas7bdat("~/Desktop/SASUniversityEdition/myfolders/Daten/uis.sas7bdat")
### Import from copyboard
# copdat <- read.delim("clipboard")
# Data_D01 <- copdat
# <!-- ---------------------------------------------------------------------- -->
# <!--                           5. Some Tools                                -->
# <!-- ---------------------------------------------------------------------- -->
## To check out vignettes for one specific package
# browseVignettes("ggplot2")
# <!-- ---------------------------------------------------------------------- -->
gsub('"', "", gsub("////", "/", readClipboard()))
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_20-21.pdf",
pages = c(1,3:4,12:25,54:85,146:150),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_20-21.pdf",
pages = c(1,18),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract2.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_20-21.pdf",
pages = c(1,4,12:25,54:85,146:150),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_20-21.pdf",
pages = c(18,1),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract2.pdf",
password = "")
pdf_combine(input = c("G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract1.pdf",
"G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_2021_Extract2.pdf"),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Book-2020-2021.pdf",
password = "")
knitr::opts_chunk$set(echo = TRUE)
# <!-- ---------------------------------------------------------------------- -->
# <!--                    1. load the required packages                       -->
# <!-- ---------------------------------------------------------------------- -->
## if(!require(psych)){install.packages("psych")}
packages<-c("tidyverse", "knitr", "papeR", "qpdf")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                        2. Basic system settings                        -->
# <!-- ---------------------------------------------------------------------- -->
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
Sys.setlocale("LC_ALL","English")
## convert backslash to forward slash in R
# gsub('"', "", gsub("////", "/", readClipboard()))
### get the path
# rstudioapi::getSourceEditorContext()$path
# dirname(rstudioapi::getSourceEditorContext()$path)
### set working directory
# getwd()
# setwd("c:/Users/zbai/Desktop")
# Sys.setlocale("LC_ALL","English")
### get the R Version
# paste(R.Version()[c("major", "minor")], collapse = ".")
### convert backslash to forward slash
# scan("clipboard",what="string")
# gsub('"', "", gsub("////", "/", readClipboard()))
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--     3. Load the SASmarkdown package if the SAS output is required      -->
# <!-- ---------------------------------------------------------------------- -->
# library(SASmarkdown)
# ### Set SAS output
# ### Reset engine to R
# saspath <- "C:/SASHome/SASFoundation/9.4/sas.exe"
# sasopts <- "-nosplash -linesize 75"
# knitr::opts_chunk$set(engine="sashtml", engine.path=saspath,
#         engine.opts=sasopts, comment=NA)
#
# # run these commands to convince yourself that
# # within this knitr session the engine changed.
# knitr::opts_chunk$get()$engine
# knitr::opts_chunk$get()$engine.path
# knitr::opts_chunk$get()$engine.opts
# <!-- ---------------------------------------------------------------------- -->
# <!-- ---------------------------------------------------------------------- -->
# <!--                         4. Import the datasets                         -->
# <!-- ---------------------------------------------------------------------- -->
### Import csv data
# pfad <- "~/Desktop/SASUniversityEdition/myfolders/Daten"
# mydata1 <- read.csv(file.path(pfad, "yourcsv_data.csv"),
#                     sep=";",
#                     header=TRUE)
### Import xlsx data
# library(readxl)
# mydata2 <- read_excel("C:/Users/zbai/Documents/GitHub/R-Projects/SAS/Yimeng/results-text.xlsx")
### Import sas data
# library(sas7bdat)
# mydata3 <- read.sas7bdat("~/Desktop/SASUniversityEdition/myfolders/Daten/uis.sas7bdat")
### Import from copyboard
# copdat <- read.delim("clipboard")
# Data_D01 <- copdat
# <!-- ---------------------------------------------------------------------- -->
# <!--                           5. Some Tools                                -->
# <!-- ---------------------------------------------------------------------- -->
## To check out vignettes for one specific package
# browseVignettes("ggplot2")
# <!-- ---------------------------------------------------------------------- -->
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_19-20.pdf",
pages = c(1,3:6,20:31,46:75,142:146),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_19-20.pdf",
pages = c(1,3:6,20:31,46:75,142:146),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_19-20.pdf",
pages = c(12,8,1),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst○-with-R\\qpdf\\Oper_1920_Extract2.pdf",
password = "")
pdf_combine(input = c("G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
"G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract2.pdf"),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Book-2019-2020.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_19-20.pdf",
pages = c(12,8,1),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract2.pdf",
password = "")
pdf_combine(input = c("G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
"G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract2.pdf"),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Book-2019-2020.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_18-19.pdf",
pages = c(1,3:4,28:41,52:82,160:164),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_19-20.pdf",
pages = c(1,3:6,20:31,46:75,142:146),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_19-20.pdf",
pages = c(12,8,1),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract2.pdf",
password = "")
pdf_combine(input = c("G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract1.pdf",
"G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1920_Extract2.pdf"),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Book-2019-2020.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_18-19.pdf",
pages = c(1,3:4,28:41,52:82,160:164),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1819_Extract1.pdf",
password = "")
pdf_subset(input = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Ballett_18-19.pdf",
pages = c(4,6,9,16,1),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1819_Extract2.pdf",
password = "")
pdf_combine(input = c("G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1819_Extract1.pdf",
"G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Oper_1819_Extract2.pdf"),
output = "G:\\Statistik\\SAS Macro programs\\external\\ZBA\\Data-Analyst-with-R\\qpdf\\Book-2018-2019.pdf",
password = "")
install.packages("AER")
library("DescTools")
dose <- matrix(c(10,9,10,7, 0,1,0,3), byrow=TRUE, nrow=2, dimnames=list(resp=0:1, dose=0:3))
Desc(dose)
CochranArmitageTest(dose, "increasing")
CochranArmitageTest(dose)
CochranArmitageTest(dose, "decreasing")
CochranArmitageTest(dose, "increasing")
CochranArmitageTest(dose)
library("DescTools")
dose <- matrix(c(10,9,10,7, 0,1,0,3), byrow=TRUE, nrow=2, dimnames=list(resp=0:1, dose=0:3))
Desc(dose)
CochranArmitageTest(dose)
### Test independence using permutation test
library("coin")
lungtumor <- data.frame(dose = rep(c(0, 1, 2), c(40, 50, 48)),
tumor = c(rep(c(0, 1), c(38, 2)),
rep(c(0, 1), c(43, 7)),
rep(c(0, 1), c(33, 15))))
independence_test(tumor ~ dose, data = lungtumor, teststat = "quad")
## Test propotion
tab <- table(lungtumor$dose, lungtumor$tumor)
CochranArmitageTest(tab)
## similar to
prop.trend.test(tab[,1], apply(tab,1, sum))
